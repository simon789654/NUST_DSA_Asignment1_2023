// AUTO-GENERATED FILE.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;
import ballerina/io;

Lecturer[] lecturerList = [
        {
            staffNumber: "S001",
            officeNumber: "O101",
            staffName: "John Doe",
            title: "Lecturer",
            courses: [
                {
                    courseName: "Introduction to Programming",
                    courseCode: "CS101",
                    nqfLevel: 5
                }
            ]
        },
        {
            staffNumber: "S002",
            officeNumber: "O102",
            staffName: "Jane Smith",
            title: "Senior Lecturer",
            courses: [
                {
                    courseName: "Advanced Programming",
                    courseCode: "CS201",
                    nqfLevel: 6
                }
            ]
        }
        // Add more lecturers as needed
    ];

courses [] course = [
    {
    "courseName": "Introduction to Computer Science",
    "courseCode": "CS101",
    "nqfLevel": 5
},

{
    "courseName": "Data Structures and Algorithms",
    "courseCode": "CS201",
    "nqfLevel": 6
},

{
    "courseName": "Database Management",
    "courseCode": "DB101",
    "nqfLevel": 5
}
];

listener http:Listener ep0 = new (9090, config = {host: "localhost"});

type courses record {
    string courseName?;
    string courseCode?;
    int nqfLevel?;
    
};

service / on ep0 {
        private int counter;
        private Lecturer[] lecturerList ;

        isolated function init() {
            self.lecturerList = [];
            self.counter = 0;
        }
    # Retrieve a list of all lecturers
    #
    # + return - Successful response 
    resource function get lecturers() returns Lecturer[] {
        return lecturerList;
    }
    # Add a new lecturer
    #
    # + payload - New lecturer data 
    # + return - Lecturer added successfully 
    resource function post lecturers(@http:Payload Lecturer payload) returns Lecturer {
        io:println("Handling a POST request to /courses ...");
        lock {
            self.lecturerList.push(payload.clone());
        }
        lock {
            self.counter += 1;
            return {staffNumber: payload.staffNumber, staffName: ""};
        }
    }
    # Retrieve the details of a specific lecturer by their staff number
    #
    # + staffNumber - parameter description 
    # + return - returns can be any of following types
    # Lecturer (Successful response)
    # http:NotFound (Lecturer not found)
    resource function get lecturers/[string staffNumber]() returns string {
        // Find the lecturer in the lecturerList by staffNumber
        Lecturer lecturer = {}; 
        foreach var lectur_ in lecturerList {
            if (lecturer.staffNumber == staffNumber) {
                lecturer = lectur_;
                break; // Found the matching lecturer, exit the loop
            }
        } 
        return string `Matching Lecturer not found`;
    }
    
    # Update an existing lecturer's information
    #
    # + staffNumber - parameter description 
    # + payload - Updated lecturer data 
    # + return - returns can be any of following types
    # Lecturer (Lecturer updated successfully)
    # http:NotFound (Lecturer not found)
    resource function put lecturers/[string staffNumber](@http:Payload Lecturer payload) returns string|Lecturer {
        // Find the index of the lecturer in the lecturerList by staffNumber
        string staffNumber_new = staffNumber;
        int i = 0;
        // Find and update the lecturer with the matching staffNumber
        foreach var lectur_ in lecturerList {
            if (lectur_.staffNumber == staffNumber_new) {
                lecturerList[i] = payload; // Update the lecturer with the new data
                return payload; // Return the updated lecturer
            }
            i = i+1;
        }

        // If no match is found, return an empty Lecturer
        return string `Matching Lecturer not found`;
    }
    # Delete a lecturer's record by their staff number
    #
    # + staffNumber - parameter description 
    # + return - returns can be any of following types
    # http:NoContent (Lecturer deleted successfully)
    # http:NotFound (Lecturer not found)
    resource function delete lecturers/[string staffNumber]() returns string {
        // Find the index of the lecturer in the lecturerList by staffNumber
        string staffNumber_new = staffNumber;
        int i = 0;

        // Find and remove the lecturer with the matching staffNumber
        int indexToRemove = -1;

        foreach var lectur_ in lecturerList {
            if (lectur_.staffNumber == staffNumber_new) {
                indexToRemove = i;
                break;
            }
            i = i+1;
        }

        if (indexToRemove != -1) {
            _ = lecturerList.remove(indexToRemove); // Remove the lecturer from the array
        }
        return string `Matching Lecturer not found`;
    }
    # Retrieve all the lecturers that teach a certain course
    #
    # + courseCode - parameter description 
    # + return - Successful response 
    resource function get courses/[string courseCode]/lecturers() returns Lecturer[] {
        // Find lecturers who teach the specified course
    Lecturer[] Lecturer_courses = [];

    foreach var lectur_ in lecturerList {
    courses[] course = <courses[]>lectur_.courses;
        foreach var _course in course {
            if(_course.courseCode == courseCode){
            Lecturer_courses.push(lectur_); // Add the lecturer to the result array
            }
        }
    }

    return Lecturer_courses;
    }
    # Retrieve all the lecturers that sit in the same office
    #
    # + officeNumber - parameter description 
    # + return - Successful response 
    resource function get offices/[string officeNumber]/lecturers() returns Lecturer[] {
        // Find lecturers who share the same office
        Lecturer[] Lecturer_courses = [];

        // Find lecturers that sit in the specified office
        foreach var lectur_ in lecturerList {
            if (lectur_.officeNumber == officeNumber) {
                Lecturer_courses.push(lectur_); // Add the lecturer to the result array
            }
        }
        return Lecturer_courses;
    }
}

